{"ast":null,"code":"(function () {\n  var Address, util;\n  util = require('util');\n\n  Address = function () {\n    function Address(userId, client) {\n      this.userId = userId;\n      this.client = client;\n    }\n\n    Address.prototype.findAll = function (cb) {\n      return this.client.get(\"/users/\" + this.userId + \"/addresses\", function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Final all user addresses error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      });\n    };\n\n    Address.prototype.create = function (address, cb) {\n      return this.client.post(\"/users/\" + this.userId + \"/addresses\", address, function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Create a new user address error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      });\n    };\n\n    Address.prototype[\"delete\"] = function (addressId, cb) {\n      return this.client[\"delete\"](\"/users/\" + this.userId + \"/addresses/\" + addressId, function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Delete an address error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      });\n    };\n\n    return Address;\n  }();\n\n  module.exports = Address;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}