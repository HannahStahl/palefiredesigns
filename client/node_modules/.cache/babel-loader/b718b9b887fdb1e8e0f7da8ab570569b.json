{"ast":null,"code":"(function () {\n  var User,\n      util,\n      __slice = [].slice;\n  util = require('util');\n\n  User = function () {\n    function User(userId, client) {\n      this.userId = userId;\n      this.client = client;\n    }\n\n    User.prototype.find = function (cb) {\n      return this.client.get(\"/users/\" + this.userId, function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Get user error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      });\n    };\n\n    User.prototype.addresses = function (cb) {\n      return this.client.get(\"/users/\" + this.userId + \"/addresses\", function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Final all user addresses error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      });\n    };\n\n    User.prototype.profile = function (cb) {\n      return this.client.get(\"/users/\" + this.userId + \"/profile\", function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Get user profile error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      });\n    };\n\n    User.prototype.updateUserProfile = function (user, cb) {\n      return this.client.put(\"/users/\" + this.userId + \"/profile\", user, function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Update user profile error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      });\n    };\n\n    User.prototype.circles = function () {\n      var cb, params, _i, _ref;\n\n      params = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];\n      return (_ref = this.client).get.apply(_ref, [\"/users/\" + this.userId + \"/circles\"].concat(__slice.call(params), [function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Get circles containing user error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      }]));\n    };\n\n    User.prototype.connectedUsers = function () {\n      var cb, params, _i, _ref;\n\n      params = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), cb = arguments[_i++];\n      return (_ref = this.client).get.apply(_ref, [\"/users/\" + this.userId + \"/connected_users\"].concat(__slice.call(params), [function (err, status, body, headers) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (status !== 200) {\n          return cb(new Error('Get connected users error'));\n        } else {\n          return cb(null, body, headers);\n        }\n      }]));\n    };\n\n    return User;\n  }();\n\n  module.exports = User;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}