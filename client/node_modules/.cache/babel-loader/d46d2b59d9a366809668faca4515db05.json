{"ast":null,"code":"/**\n * jQuery Grid-A-Licious(tm) v3.01\n *\n * Terms of Use - jQuery Grid-A-Licious(tm)\n * under the MIT (http://www.opensource.org/licenses/mit-license.php) License.\n *\n * Copyright 2008-2012 Andreas Pihlstr√∂m (Suprb). All rights reserved.\n * (http://suprb.com/apps/gridalicious/)\n *\n */\n// Debouncing function from John Hann\n// http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/\n// Copy pasted from http://paulirish.com/2009/throttled-smartresize-jquery-event-handler/\n(function ($, sr) {\n  var debounce = function debounce(func, threshold, execAsap) {\n    var timeout;\n    return function debounced() {\n      var obj = this,\n          args = arguments;\n\n      function delayed() {\n        if (!execAsap) func.apply(obj, args);\n        timeout = null;\n      }\n\n      ;\n      if (timeout) clearTimeout(timeout);else if (execAsap) func.apply(obj, args);\n      timeout = setTimeout(delayed, threshold || 150);\n    };\n  };\n\n  jQuery.fn[sr] = function (fn) {\n    return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr);\n  };\n})(jQuery, 'smartresize'); // The Grid-A-Licious magic\n\n\n(function ($) {\n  $.Gal = function (options, element) {\n    this.element = $(element);\n\n    this._init(options);\n  };\n\n  $.Gal.settings = {\n    selector: '.item',\n    width: 225,\n    gutter: 20,\n    animate: false,\n    animationOptions: {\n      speed: 200,\n      duration: 300,\n      effect: 'fadeInOnAppear',\n      queue: true,\n      complete: function complete() {}\n    }\n  };\n  $.Gal.prototype = {\n    _init: function _init(options) {\n      var container = this;\n      this.name = this._setName(5);\n      this.gridArr = [];\n      this.gridArrAppend = [];\n      this.gridArrPrepend = [];\n      this.setArr = false;\n      this.setGrid = false;\n      this.setOptions;\n      this.cols = 0;\n      this.itemCount = 0;\n      this.prependCount = 0;\n      this.isPrepending = false;\n      this.appendCount = 0;\n      this.resetCount = true;\n      this.ifCallback = true;\n      this.box = this.element;\n      this.boxWidth = this.box.width();\n      this.options = $.extend(true, {}, $.Gal.settings, options);\n      this.gridArr = $.makeArray(this.box.find(this.options.selector));\n      this.isResizing = false;\n      this.w = 0;\n      this.boxArr = []; // build columns\n\n      this._setCols(); // build grid\n\n\n      this._renderGrid('append'); // add class 'gridalicious' to container\n\n\n      $(this.box).addClass('gridalicious'); // add smartresize\n\n      $(window).smartresize(function () {\n        container.resize();\n      });\n    },\n    _setName: function _setName(length, current) {\n      current = current ? current : '';\n      return length ? this._setName(--length, \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz\".charAt(Math.floor(Math.random() * 60)) + current) : current;\n    },\n    _setCols: function _setCols() {\n      // calculate columns\n      this.cols = Math.floor(this.box.width() / this.options.width); //If Cols lower than 1, the grid disappears\n\n      if (this.cols < 1) {\n        this.cols = 1;\n      }\n\n      diff = (this.box.width() - this.cols * this.options.width - this.options.gutter) / this.cols;\n      w = (this.options.width + diff) / this.box.width() * 100;\n      this.w = w; // add columns to box\n\n      for (var i = 0; i < this.cols; i++) {\n        var div = $('<div></div>').addClass('galcolumn').attr('id', 'item' + i + this.name).css({\n          'width': w + '%',\n          'paddingLeft': this.options.gutter,\n          'paddingBottom': this.options.gutter,\n          'float': 'left',\n          '-webkit-box-sizing': 'border-box',\n          '-moz-box-sizing': 'border-box',\n          '-o-box-sizing': 'border-box',\n          'box-sizing': 'border-box'\n        });\n        this.box.append(div);\n      }\n\n      this.box.find($('#clear' + this.name)).remove(); // add clear float\n\n      var clear = $('<div></div>').css({\n        'clear': 'both',\n        'height': '0',\n        'width': '0',\n        'display': 'block'\n      }).attr('id', 'clear' + this.name);\n      this.box.append(clear);\n    },\n    _renderGrid: function _renderGrid(method, arr, count, prepArray) {\n      var items = [];\n      var boxes = [];\n      var prependArray = [];\n      var itemCount = 0;\n      var prependCount = this.prependCount;\n      var appendCount = this.appendCount;\n      var gutter = this.options.gutter;\n      var cols = this.cols;\n      var name = this.name;\n      var i = 0;\n      var w = $('.galcolumn').width(); // if arr\n\n      if (arr) {\n        boxes = arr; // if append\n\n        if (method == \"append\") {\n          // get total of items to append\n          appendCount += count; // set itemCount to last count of appened items\n\n          itemCount = this.appendCount;\n        } // if prepend\n\n\n        if (method == \"prepend\") {\n          // set itemCount\n          this.isPrepending = true;\n          itemCount = Math.round(count % cols);\n          if (itemCount <= 0) itemCount = cols;\n        } // called by _updateAfterPrepend()\n\n\n        if (method == \"renderAfterPrepend\") {\n          // get total of items that was previously prepended\n          appendCount += count; // set itemCount by counting previous prepended items\n\n          itemCount = count;\n        }\n      } else {\n        boxes = this.gridArr;\n        appendCount = $(this.gridArr).size();\n      } // push out the items to the columns\n\n\n      $.each(boxes, function (index, value) {\n        var item = $(value);\n        var width = '100%'; // if you want something not to be \"responsive\", add the class \"not-responsive\" to the selector container            \n\n        if (item.hasClass('not-responsive')) {\n          width = 'auto';\n        }\n\n        item.css({\n          'marginBottom': gutter,\n          'zoom': '1',\n          'filter': 'alpha(opacity=0)',\n          'opacity': '0'\n        }).find('img, object, embed, iframe').css({\n          'width': width,\n          'height': 'auto',\n          'display': 'block',\n          'margin-left': 'auto',\n          'margin-right': 'auto'\n        }); // prepend on append to column\n\n        if (method == 'prepend') {\n          itemCount--;\n          $(\"#item\" + itemCount + name).prepend(item);\n          items.push(item);\n          if (itemCount == 0) itemCount = cols;\n        } else {\n          $(\"#item\" + itemCount + name).append(item);\n          items.push(item);\n          itemCount++;\n          if (itemCount >= cols) itemCount = 0;\n          if (appendCount >= cols) appendCount = appendCount - cols;\n        }\n      });\n      this.appendCount = appendCount;\n      this.itemCount = itemCount;\n\n      if (method == \"append\" || method == \"prepend\") {\n        if (method == \"prepend\") {\n          // render old items and reverse the new items\n          this._updateAfterPrepend(this.gridArr, boxes);\n        }\n\n        this._renderItem(items);\n\n        this.isPrepending = false;\n      } else {\n        this._renderItem(this.gridArr);\n      }\n    },\n    _collectItems: function _collectItems() {\n      var collection = [];\n      $(this.box).find(this.options.selector).each(function (i) {\n        collection.push($(this));\n      });\n      return collection;\n    },\n    _renderItem: function _renderItem(items) {\n      var speed = this.options.animationOptions.speed;\n      var effect = this.options.animationOptions.effect;\n      var duration = this.options.animationOptions.duration;\n      var queue = this.options.animationOptions.queue;\n      var animate = this.options.animate;\n      var complete = this.options.animationOptions.complete;\n      var i = 0;\n      var t = 0; // animate\n\n      if (animate === true && !this.isResizing) {\n        // fadeInOnAppear\n        if (queue === true && effect == \"fadeInOnAppear\") {\n          if (this.isPrepending) items.reverse();\n          $.each(items, function (index, value) {\n            setTimeout(function () {\n              $(value).animate({\n                opacity: '1.0'\n              }, duration);\n              t++;\n\n              if (t == items.length) {\n                complete.call(undefined, items);\n              }\n            }, i * speed);\n            i++;\n          });\n        } else if (queue === false && effect == \"fadeInOnAppear\") {\n          if (this.isPrepending) items.reverse();\n          $.each(items, function (index, value) {\n            $(value).animate({\n              opacity: '1.0'\n            }, duration);\n            t++;\n\n            if (t == items.length) {\n              if (this.ifCallback) {\n                complete.call(undefined, items);\n              }\n            }\n          });\n        } // no effect but queued\n\n\n        if (queue === true && !effect) {\n          $.each(items, function (index, value) {\n            $(value).css({\n              'opacity': '1',\n              'filter': 'alpha(opacity=100)'\n            });\n            t++;\n\n            if (t == items.length) {\n              if (this.ifCallback) {\n                complete.call(undefined, items);\n              }\n            }\n          });\n        } // don not animate & no queue\n\n      } else {\n        $.each(items, function (index, value) {\n          $(value).css({\n            'opacity': '1',\n            'filter': 'alpha(opacity=100)'\n          });\n        });\n\n        if (this.ifCallback) {\n          complete.call(items);\n        }\n      }\n    },\n    _updateAfterPrepend: function _updateAfterPrepend(prevItems, newItems) {\n      var gridArr = this.gridArr; // add new items to gridArr\n\n      $.each(newItems, function (index, value) {\n        gridArr.unshift(value);\n      });\n      this.gridArr = gridArr;\n    },\n    resize: function resize() {\n      if (this.box.width() === this.boxWidth) {\n        return;\n      } // delete columns in box\n\n\n      this.box.find($('.galcolumn')).remove(); // build columns\n\n      this._setCols(); // build grid\n\n\n      this.ifCallback = false;\n      this.isResizing = true;\n\n      this._renderGrid('append');\n\n      this.ifCallback = true;\n      this.isResizing = false;\n      this.boxWidth = this.box.width();\n    },\n    append: function append(items) {\n      var gridArr = this.gridArr;\n      var gridArrAppend = this.gridArrPrepend;\n      $.each(items, function (index, value) {\n        gridArr.push(value);\n        gridArrAppend.push(value);\n      });\n\n      this._renderGrid('append', items, $(items).size());\n    },\n    prepend: function prepend(items) {\n      this.ifCallback = false;\n\n      this._renderGrid('prepend', items, $(items).size());\n\n      this.ifCallback = true;\n    }\n  };\n\n  $.fn.gridalicious = function (options, e) {\n    if (typeof options === 'string') {\n      this.each(function () {\n        var container = $.data(this, 'gridalicious');\n        container[options].apply(container, [e]);\n      });\n    } else {\n      this.each(function () {\n        $.data(this, 'gridalicious', new $.Gal(options, this));\n      });\n    }\n\n    return this;\n  };\n})(jQuery);","map":null,"metadata":{},"sourceType":"script"}